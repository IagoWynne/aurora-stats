# https://gqlgen.com/getting-started/

scalar Time

type DeleteResponse {
  id: ID!
  success: Boolean!
}

type InsertResponse {
  id: ID!
}

type Person {
  id: ID!
  firstName: String!
  lastName: String!
}

type WheelOption {
  id: ID!
  name: String!
}

type WheelResult {
  id: ID!
  date: Time!
  winner: Person!
  prize: WheelOption!
}

type VibeCheckScore {
  id: ID!
  person: Person!
  score: Float!
}

input VibeCheckInputScore {
  personId: Int!,
  score: Float!
}

type VibeCheck {
  date: Time!
  scores: [VibeCheckScore!]!
  averageScore: Float!
}

type Query {
  people: [Person!]!
  wheelOptions: [WheelOption!]!
  wheelResults(from: Time!, to: Time): [WheelResult!]!
  vibeChecks(from: Time!, to: Time!): [VibeCheck!]!
}

type Mutation {
  createPerson(firstName: String!, lastName: String!): InsertResponse!
  deletePerson(id: ID!): DeleteResponse!
  addWheelOption(name: String!): InsertResponse!
  addWheelRun(date: Time!, winnerId: Int!, resultId: Int!): InsertResponse!
  addVibeCheck(date: Time!, scores: [VibeCheckInputScore!]!): Boolean!
}
