package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"aurora-stats/api/graph/model"
	"aurora-stats/api/internal/people"
	"aurora-stats/api/internal/vibecheck"
	"aurora-stats/api/internal/wheel"
	"context"
	"time"
)

// CreatePerson is the resolver for the createPerson field.
func (r *mutationResolver) CreatePerson(ctx context.Context, firstName string, lastName string) (*model.InsertResponse, error) {
	personID, err := people.CreatePerson(firstName, lastName)

	if err != nil {
		return nil, err
	}

	// returns the new person with their DB id
	return &model.InsertResponse{ID: personID}, nil
}

// DeletePerson is the resolver for the deletePerson field.
func (r *mutationResolver) DeletePerson(ctx context.Context, id int64) (*model.DeleteResponse, error) {
	err := people.DeletePerson(id)

	if err != nil {
		return &model.DeleteResponse{ID: id, Success: false}, err
	}

	return &model.DeleteResponse{ID: id, Success: true}, nil
}

// AddWheelOption is the resolver for the addWheelOption field.
func (r *mutationResolver) AddWheelOption(ctx context.Context, name string) (*model.InsertResponse, error) {
	wheelOptionID, err := wheel.SaveWheelOption(name)

	return &model.InsertResponse{ID: wheelOptionID}, err
}

// AddWheelRun is the resolver for the addWheelRun field.
func (r *mutationResolver) AddWheelRun(ctx context.Context, date time.Time, winnerID int64, resultID int64) (*model.InsertResponse, error) {
	wheelRunID, err := wheel.SaveWheelRun(date, winnerID, resultID)

	return &model.InsertResponse{ID: wheelRunID}, err
}

// AddVibeCheck is the resolver for the addVibeCheck field.
func (r *mutationResolver) AddVibeCheck(ctx context.Context, date time.Time, scores []*model.VibeCheckInputScore) (bool, error) {
	var inputScores []vibecheck.DomainVibeCheckScore

	for i := range scores {
		inputScores = append(inputScores, mapGQLVibeCheckScoreToDomain(scores[i]))
	}

	err := vibecheck.SaveVibeCheck(date, inputScores)

	return err == nil, err
}

// People is the resolver for the people field.
func (r *queryResolver) People(ctx context.Context) ([]*model.Person, error) {
	var resultsPeople []*model.Person

	allPeople, err := people.GetAll()
	if err != nil {
		return nil, err
	}

	for _, person := range allPeople {
		resultsPeople = append(resultsPeople, mapPersonToGQL(person))
	}

	return resultsPeople, nil
}

// WheelOptions is the resolver for the wheelOptions field.
func (r *queryResolver) WheelOptions(ctx context.Context) ([]*model.WheelOption, error) {
	var resultsWheelOptions []*model.WheelOption

	wheelOptions, err := wheel.GetAllWheelOptions()
	if err != nil {
		return nil, err
	}

	for _, wheelOption := range wheelOptions {
		resultsWheelOptions = append(resultsWheelOptions, mapWheelOptionToGQL(wheelOption))
	}

	return resultsWheelOptions, nil
}

// WheelResults is the resolver for the wheelResults field.
func (r *queryResolver) WheelResults(ctx context.Context, from time.Time, to *time.Time) ([]*model.WheelResult, error) {
	var wheelWinResults []*model.WheelResult

	wheelResults, err := wheel.GetWheelRuns(from, to)
	if err != nil {
		return nil, err
	}

	for _, wheelResult := range wheelResults {
		wheelWinResults = append(wheelWinResults, mapDomainWheelResultToGQL(wheelResult))
	}

	return wheelWinResults, nil
}

// VibeChecks is the resolver for the vibeChecks field.
func (r *queryResolver) VibeChecks(ctx context.Context, from time.Time, to time.Time) ([]*model.VibeCheck, error) {
	results, err := vibecheck.GetVibeChecksBetween(from, to)
	if err != nil {
		return nil, err
	}

	var vibeChecks []*model.VibeCheck
	for _, result := range results {
		vibeChecks = append(vibeChecks, mapDomainVibeCheckToGQL(result))
	}

	return vibeChecks, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
