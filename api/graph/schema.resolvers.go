package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"aurora-stats/api/graph/model"
	"aurora-stats/api/internal/people"
	"context"
	"strconv"
)

// CreatePerson is the resolver for the createPerson field.
func (r *mutationResolver) CreatePerson(ctx context.Context, firstName string, lastName string) (*model.Person, error) {
	// creates a person using the struct from people module (this is the struct that interacts with the database)
	var person people.Person
	// sets the person's name based on the input
	person.FirstName = firstName
	person.LastName = lastName
	// saves the person to the database and is returned their id
	personID := person.Save()

	// returns the new person with their DB id
	return &model.Person{ID: strconv.FormatInt(personID, 10), FirstName: person.FirstName, LastName: person.LastName}, nil
}

// People is the resolver for the people field.
func (r *queryResolver) People(ctx context.Context) ([]*model.Person, error) {
	var resultsPeople []*model.Person

	for _, person := range people.GetAll() {
		resultsPeople = append(resultsPeople, &model.Person{ID: person.ID, FirstName: person.FirstName, LastName: person.LastName})
	}

	return resultsPeople, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
