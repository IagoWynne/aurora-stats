package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"aurora-stats/api/graph/model"
	"aurora-stats/api/internal/people"
	"aurora-stats/api/internal/wheel"
	"context"
	"strconv"
)

// CreatePerson is the resolver for the createPerson field.
func (r *mutationResolver) CreatePerson(ctx context.Context, firstName string, lastName string) (*model.Person, error) {
	// creates a person using the struct from people module (this is the struct that interacts with the database)
	var person people.Person
	// sets the person's name based on the input
	person.FirstName = firstName
	person.LastName = lastName
	// saves the person to the database and is returned their id
	personID := person.Save()

	// returns the new person with their DB id
	return &model.Person{ID: strconv.FormatInt(personID, 10), FirstName: person.FirstName, LastName: person.LastName}, nil
}

// AddWheelOption is the resolver for the addWheelOption field.
func (r *mutationResolver) AddWheelOption(ctx context.Context, name string) (*model.WheelOption, error) {
	wheelOptionID := wheel.SaveWheelOption(name)

	return &model.WheelOption{ID: strconv.FormatInt(wheelOptionID, 10), Name: name}, nil
}

// AddWheelRun is the resolver for the addWheelRun field.
func (r *mutationResolver) AddWheelRun(ctx context.Context, date string, winnerID int, resultID int) (*model.WheelResult, error) {
	wheelRunID := wheel.SaveWheelRun(date, winnerID, resultID)

	return &model.WheelResult{ID: strconv.FormatInt(wheelRunID, 10), Date: date, PersonID: winnerID, OptionID: resultID}, nil
}

// People is the resolver for the people field.
func (r *queryResolver) People(ctx context.Context) ([]*model.Person, error) {
	var resultsPeople []*model.Person

	for _, person := range people.GetAll() {
		resultsPeople = append(resultsPeople, &model.Person{ID: strconv.FormatInt(person.ID, 10), FirstName: person.FirstName, LastName: person.LastName})
	}

	return resultsPeople, nil
}

// WheelOptions is the resolver for the wheelOptions field.
func (r *queryResolver) WheelOptions(ctx context.Context) ([]*model.WheelOption, error) {
	var resultsWheelOptions []*model.WheelOption

	for _, wheelOption := range wheel.GetAllWheelOptions() {
		resultsWheelOptions = append(resultsWheelOptions, &model.WheelOption{ID: strconv.FormatInt(wheelOption.ID, 10), Name: wheelOption.Name})
	}

	return resultsWheelOptions, nil
}

// WheelWins is the resolver for the wheelWins field.
func (r *queryResolver) WheelWins(ctx context.Context, from string, to *string) ([]*model.WheelWinStat, error) {
	var wheelWinResults []*model.WheelWinStat

	for _, wheelWin := range wheel.GetWheelRuns(from, to) {
		wheelWinResults = append(wheelWinResults, &model.WheelWinStat{
			ID:   wheelWin.ID,
			Date: wheelWin.Date,
			Winner: &model.Person{
				ID:        strconv.FormatInt(wheelWin.Winner.ID, 10),
				FirstName: wheelWin.Winner.FirstName,
				LastName:  wheelWin.Winner.LastName,
			},
			Result: &model.WheelOption{
				ID:   strconv.FormatInt(wheelWin.Result.ID, 10),
				Name: wheelWin.Result.Name,
			},
		})
	}

	return wheelWinResults, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
